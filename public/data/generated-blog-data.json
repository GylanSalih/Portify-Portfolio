[
  {
    "slug": "css-grid",
    "title": "CSS Grid Tutorial: Cards Layout",
    "subtitle": "Create a flexible card layout with CSS Grid",
    "category": "CSS",
    "tags": [
      "CSS",
      "Grid",
      "Layout",
      "Cards",
      "Web Development"
    ],
    "date": "2025-10-17",
    "image": "/assets/images/landing/OniGirl9.jpg",
    "excerpt": "Learn how to create a flexible card layout using CSS Grid.",
    "author": "Gylan Salih",
    "authorImage": "/assets/images/blog/author.webp",
    "content": "\n## Introduction\n\nCSS Grid is a powerful layout system that allows developers to create complex layouts with ease. In this tutorial, you will learn how to build a **flexible grid layout with cards** that looks great on any screen size.\n\n## Basic Grid Structure\n\nFirst, we create the HTML structure for the grid. Each card is a `<div>` inside the grid container.\n\n\n## CSS Styling for the Grid\n\nNext, we define the CSS to create the grid layout. Using `display: grid` and `grid-template-columns`, we can control the number of columns and spacing.\n\n\n## Responsive Behavior\n\nBy using `auto-fit` with `minmax`, the grid automatically adjusts the number of columns based on the available width. On smaller screens, cards stack vertically, while on larger screens, multiple columns appear.\n\n## Adding More Content\n\nYou can easily add more cards by duplicating the `<div class=\"card\">` element inside the container. The grid will automatically adapt without additional changes to the CSS.\n\n## Conclusion\n\nCSS Grid makes it straightforward to create flexible, responsive layouts. Using cards inside a grid allows you to showcase content in a visually appealing and organized way. Combine this approach with hover effects, animations, or interactive elements to create engaging UI components.\n",
    "readTime": "1 min read",
    "filename": "css-grid.mdx",
    "id": "css-grid",
    "views": 0,
    "likes": 0
  },
  {
    "slug": "default-blog",
    "title": "Default Blog Post - Complete HTML Elements Test",
    "subtitle": "A comprehensive test page showcasing all HTML elements for styling development",
    "category": "General",
    "tags": [
      "Default",
      "Testing",
      "Wireframe"
    ],
    "date": "February 9, 2025",
    "image": "/assets/images/blog/blog1.webp",
    "excerpt": "A comprehensive test page showcasing all HTML elements for styling development",
    "author": "Gylan Salih",
    "authorImage": "/assets/images/blog/author.webp",
    "content": "\n## Introduction to HTML Elements Testing\n\nThis is a comprehensive test page designed to showcase all common HTML elements used in blog posts. It serves as a reference for styling and ensures consistent design across all blog content. Whether you're working with headings, paragraphs, lists, or code blocks, this page has it all.\n\nThe purpose of this page is to provide developers and designers with a complete overview of how different HTML elements render with the current stylesheet. This helps maintain design consistency and identifies any styling gaps.\n\n## Typography and Text Formatting\n\nTypography is the foundation of good web design. This section demonstrates various text formatting options available in HTML, including **bold text**, *italic text*, and <u>underlined text</u>. You can also use `inline code` for highlighting technical terms or code snippets within paragraphs.\n\nHere's an example of a longer paragraph with multiple formatting styles. Good typography ensures that your content is readable and accessible to all users. Consider factors like line height, letter spacing, and font size when designing your blog posts. Remember that <mark>highlighted text</mark> can draw attention to important information, while <del>strikethrough text</del> can indicate corrections or outdated information.\n\n### Subheading Level 3\n\nSubheadings help organize content into logical sections. They create a visual hierarchy that guides readers through your article. Use them generously to break up long sections of text.\n\n#### Subheading Level 4\n\nEven smaller subheadings can be useful for very detailed sections. They provide additional levels of organization without overwhelming the reader.\n\n## Lists and Structured Content\n\nLists are essential for organizing information in a scannable format. Here are some examples of different list types:\n\n### Unordered Lists\n\n- First item in the unordered list\n- Second item with more detail\n- Third item with nested content:\n  - Nested item 1\n  - Nested item 2\n- Fourth top-level item\n\n### Ordered Lists\n\n1. First step in the process\n2. Second step with detailed explanation\n3. Third step showing progression\n4. Final step completing the sequence\n\n### Definition Lists\n\nHTML  \n: HyperText Markup Language - the standard markup language for web pages  \n\nCSS  \n: Cascading Style Sheets - used for styling HTML elements  \n\nJavaScript  \n: A programming language that enables interactive web pages  \n\n## Code Blocks and Technical Examples\n\nCode blocks are essential for technical blog posts. Here's an example of inline code: `const example = 'Hello World';`\n\nAnd here's a larger code block demonstrating syntax:\n\n```javascript\nfunction calculateSum(a, b) {\n  // Add two numbers together\n  const sum = a + b;\n  return sum;\n}\n\n// Usage example\nconst result = calculateSum(5, 10);\nconsole.log(result); // Output: 15\n````\n\nCode blocks should have proper syntax highlighting and formatting to make them easy to read and understand. They're perfect for showcasing examples, tutorials, and technical implementations.\n\n### Additional Code Examples\n\n```javascript\n// React component example\nimport React from 'react';\nexport default function Demo() {\n  return <h1>Hallo Welt</h1>;\n}\n```\n\n```css\n/* CSS styling example */\n.blog-post {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n}\n```\n\n```html\n<!-- HTML structure example -->\n<div class=\"container\">\n  <h1>Blog Post Title</h1>\n  <p>Content goes here</p>\n</div>\n```\n\n## Blockquotes and Citations\n\nBlockquotes are useful for highlighting important quotes or referenced material:\n\n> Web design is not just about creating pretty layouts. It's about understanding the marketing challenge behind your business. It's about creating a user experience that makes it easy for visitors to take action. Good design is invisible - it just works.\n\nUse blockquotes sparingly to emphasize key points or external references. They create visual breaks in your content and draw attention to important ideas.\n\n## Images and Media\n\nWhen using images in your blog posts, consider the following best practices:\n\n* Optimize images for web to reduce loading times\n* Use descriptive filenames and alt text\n* Ensure images are responsive and look good on all devices\n* Consider using WebP format for better compression\n\n### Custom Images with Captions\n\n![Ghost in the Shell Project 2](/assets/images/portfolio/GITS2.jpg)\n\n*Ghost in the Shell - Character Model*\n\n\n### Video Components\n\n<video controls title=\"Red Fire Effect\" style=\"width: 100%; max-width: 800px; border-radius: 0.5rem; margin: 1rem 0;\">\n  <source src=\"/assets/videos/redfire.mp4\" type=\"video/mp4\" />\n  Your browser does not support the video tag.\n</video>\n\n## Tables for Data Presentation\n\nTables are excellent for presenting structured data in a clear, organized format:\n\n| Feature           | Description                          | Importance |\n| ----------------- | ------------------------------------ | ---------- |\n| Responsive Design | Adapts to different screen sizes     | High       |\n| Performance       | Fast loading and smooth interactions | Critical   |\n| Accessibility     | Usable by everyone                   | Essential  |\n| SEO               | Search engine optimization           | Important  |\n\n### Project Details Table\n\n| Detail      | Information               |\n| ----------- | ------------------------- |\n| Theme       | Cyberpunk & Sci-Fi        |\n| Inspiration | Akira, Ghost in the Shell |\n\nEnsure your tables are responsive and maintain readability on mobile devices. Consider horizontal scrolling for wide tables.\n\n## Links and Navigation\n\nLinks are the foundation of the web. They should be clearly identifiable and provide clear indication of their destination. Here are some examples:\n\nThis is a [link to another section](#introduction) within the same page. You can also create [external links](https://example.com) that open in new tabs.\n\n### External Links\n\n[Live Demo](https://example.com/demo)\n\n[GitHub Repository](https://github.com/example/repo)\n\nBest practices for links include:\n\n* Use descriptive link text (avoid \"click here\")\n* Ensure links are keyboard accessible\n* Provide visual feedback on hover and focus\n* Use appropriate attributes for external links\n\n## MDX Components Showcase\n\n### Callouts and Admonitions\n\n> **Note:** This is a note callout for general information and tips.\n\n> **Warning:** This is a warning callout for important notices and potential issues.\n\n> **Success:** This is a success callout for positive feedback and achievements.\n\n> **Error:** This is an error callout for critical issues and problems.\n\n> **Tip:** This is a tip callout for helpful suggestions and best practices.\n\n> **Caution:** This is a caution callout for careful attention and considerations.\n\n> **Important:** This is an important callout for essential information that requires attention.\n\n### Interactive Elements\n\n<details>\n  <summary>Click to expand technical details</summary>\n  <ul>\n    <li>Next.js + TypeScript</li>\n    <li>GSAP Animations</li>\n    <li>Three.js WebGL</li>\n    <li>Vercel Deployment</li>\n    <li>Responsive Design</li>\n    <li>Performance Optimization</li>\n  </ul>\n</details>\n\n<details>\n  <summary>Performance Tips</summary>\n  <ol>\n    <li>Use WebP format for images</li>\n    <li>Implement lazy loading</li>\n    <li>Compress 3D models with DRACO</li>\n    <li>Use CDN for static assets</li>\n  </ol>\n</details>\n\n\n## Mixed Content Section\n\nThis section combines multiple MDX components to test their interaction:\n\n> **Note:** This note contains important information about the project.\n\nHere's a code snippet: `const example = 'Hello World';`\n\n> **Warning:** Remember to optimize images for web performance!\n\n## Conclusion\n\nThis comprehensive test page demonstrates all the essential HTML elements commonly used in blog posts. It serves as both a styling reference and a quality assurance tool for ensuring consistent design across your blog.\n\nBy maintaining a well-structured HTML document with proper semantic markup, you ensure that your content is:\n\n* Accessible to all users, including those using assistive technologies\n* SEO-friendly with proper heading hierarchy and structure\n* Easy to style and maintain with CSS\n* Consistent across different browsers and devices\n\nRemember to regularly review and update your styling to ensure all elements render correctly and maintain a cohesive design throughout your blog. Happy blogging! 🚀\n\n### Final Notes\n\nThis comprehensive test page now includes all available MDX components:\n\n* **Typography:** All heading levels, paragraphs, text formatting\n* **Lists:** Ordered, unordered, and definition lists\n* **Code:** Inline code and code blocks with syntax highlighting\n* **Media:** Images with captions and video elements\n* **Interactive:** Details/summary elements\n* **Callouts:** Blockquote-based callouts (Note, Warning, Success, Error, Tip, Caution, Important)\n* **Tables:** Structured data presentation\n* **Links:** Internal and external links with proper attributes\n\nThis serves as a complete reference for styling and testing all blog post elements and MDX components.\n",
    "readTime": "7 min read",
    "filename": "default-blog.mdx",
    "id": "default-blog",
    "views": 0,
    "likes": 0
  },
  {
    "slug": "css-grid-flexbox-mastery-2025",
    "title": "CSS Grid and Flexbox Mastery: Building Modern Layouts",
    "subtitle": "Master responsive layouts with the power of CSS Grid and Flexbox",
    "category": "Frontend",
    "tags": [
      "CSS",
      "Layout",
      "Frontend"
    ],
    "date": "February 7, 2025",
    "image": "/assets/images/landing/OniGirl7.webp",
    "excerpt": "Master CSS Grid and Flexbox to create responsive, flexible layouts. Learn advanced techniques, best practices, and real-world examples.",
    "author": "Gylan Salih",
    "authorImage": "/assets/images/blog/author.webp",
    "content": "\n## Introduction\n\nCSS Grid and Flexbox have revolutionized web layout design, providing powerful tools for creating responsive, flexible interfaces. Understanding when and how to use each layout method is crucial for modern frontend development.\n\nThis comprehensive guide will teach you to master both CSS Grid and Flexbox, with practical examples and advanced techniques that will elevate your layout skills to the professional level.\n\n## Flexbox: The Foundation of Modern Layouts\n\nFlexbox excels at one-dimensional layouts, whether horizontal or vertical. It's perfect for navigation bars, button groups, and centering content. The key is understanding the flex container and flex items relationship.\n\n```css\n.container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 1rem;\n}\n\n.item {\n  flex: 1 1 auto; /* grow, shrink, basis */\n}\n```\n\nUse flexbox for components that need to distribute space dynamically, such as responsive navigation menus, card layouts, and form controls.\n\n## CSS Grid: Two-Dimensional Layout Control\n\nCSS Grid provides unprecedented control over two-dimensional layouts. It's ideal for page layouts, complex components, and any design that requires precise positioning in both directions.\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  grid-template-rows: auto 1fr auto;\n  gap: 2rem;\n  min-height: 100vh;\n}\n\n.header { grid-area: 1 / 1 / 2 / -1; }\n.main { grid-area: 2 / 1 / 3 / -1; }\n.footer { grid-area: 3 / 1 / 4 / -1; }\n```\n\nGrid's ability to create responsive layouts without media queries using functions like minmax() and repeat() makes it incredibly powerful.\n\n## Advanced Layout Techniques\n\nCombine Grid and Flexbox for optimal results. Use Grid for the overall page structure and Flexbox for component-level layouts. This hybrid approach leverages the strengths of both systems.\n\nAdvanced features like CSS Grid subgrid, container queries, and intrinsic sizing provide even more layout possibilities. These features enable truly responsive designs that adapt to content and context.\n\n```css\n/* Hybrid approach */\n.page-layout {\n  display: grid;\n  grid-template-areas:\n    'header header'\n    'sidebar main'\n    'footer footer';\n}\n\n.navigation {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n```\n\n## Responsive Design Strategies\n\nModern CSS layout tools enable intrinsically responsive designs. Use CSS Grid's auto-fit and auto-fill, combined with Flexbox's flex-wrap, to create layouts that adapt naturally to different screen sizes.\n\nContainer queries and aspect-ratio properties provide even more control over responsive behavior, allowing components to respond to their container size rather than just viewport size.\n\n## Conclusion\n\nMastering CSS Grid and Flexbox is essential for modern web development. These layout methods provide the foundation for creating beautiful, responsive interfaces that work across all devices and screen sizes.\n\nPractice combining both techniques, experiment with advanced features, and always consider the content and user experience when choosing your layout approach. The future of web layout is flexible, responsive, and more powerful than ever.\n",
    "readTime": "3 min read",
    "filename": "css-grid-flexbox-mastery-2025.mdx",
    "id": "css-grid-flexbox-mastery-2025",
    "views": 0,
    "likes": 0
  },
  {
    "slug": "ui-ux-design-principles-2025",
    "title": "Essential UI/UX Design Principles Every Developer Should Know",
    "subtitle": "Create user interfaces that delight and convert",
    "category": "Design",
    "tags": [
      "Design",
      "UI/UX",
      "Frontend"
    ],
    "date": "February 5, 2025",
    "image": "/assets/images/landing/OniGirl5.webp",
    "excerpt": "Discover the fundamental UI/UX design principles that create exceptional user experiences. From typography to accessibility - everything you need to know.",
    "author": "Gylan Salih",
    "authorImage": "/assets/images/blog/author.webp",
    "content": "\n## Introduction\n\nGreat user interface design is the bridge between complex functionality and effortless user experience. As developers, understanding UI/UX principles isn't just beneficial—it's essential for creating applications that users love and businesses thrive on.\n\nIn this comprehensive guide, we'll explore the fundamental design principles that separate good interfaces from exceptional ones, with practical examples and implementation strategies.\n\n## Visual Hierarchy and Typography\n\nVisual hierarchy guides users through your interface by establishing the relative importance of elements. Use size, color, contrast, and spacing to create clear information hierarchies that lead users naturally through your content.\n\nTypography plays a crucial role in hierarchy. Establish a typographic scale with consistent font sizes, weights, and line heights. Limit yourself to 2-3 font families and create clear distinctions between headings, body text, and supporting information.\n\nConsider the F-pattern for reading behavior—users typically scan in an F-shaped pattern, so place important information accordingly. Use white space generously to reduce cognitive load and improve focus.\n\n## Color Theory and Accessibility\n\nColor is a powerful communication tool that conveys meaning, emotion, and brand identity. Develop a coherent color palette with primary, secondary, and neutral colors that work harmoniously across your interface.\n\nEnsure sufficient contrast for accessibility—aim for at least 4.5:1 contrast ratio for normal text and 3:1 for large text. Use tools like WebAIM's contrast checker to validate your color choices.\n\nRemember that color should never be the only way to convey information. Always provide alternative methods like icons, text labels, or patterns to ensure your interface is accessible to colorblind users.\n\n## Interaction Design and Feedback\n\nEvery user action should receive immediate, clear feedback. Implement micro-interactions that provide visual confirmation of user actions—button hover states, loading indicators, and success messages all contribute to a responsive feel.\n\nDesign for different interaction methods: touch, mouse, and keyboard. Ensure touch targets are at least 44px for mobile devices and provide clear focus indicators for keyboard navigation.\n\nUse progressive disclosure to manage complexity. Show only what users need to see initially, then reveal additional options as needed. This approach prevents overwhelming users while maintaining access to advanced features.\n\n## Layout and Grid Systems\n\nConsistent layouts create predictable, learnable interfaces. Use grid systems to align elements and create visual relationships between interface components. The 8-point grid system is particularly effective for creating consistent spacing.\n\nApply the proximity principle—group related elements together and separate unrelated ones. Use consistent patterns for similar elements across your interface to build user mental models.\n\nResponsive design isn't just about screen sizes—consider how your interface adapts to different orientations, input methods, and accessibility needs.\n\n## Conclusion\n\nMastering UI/UX design principles as a developer gives you a significant advantage in creating exceptional user experiences. These principles work together to create interfaces that are not just functional, but delightful to use.\n\nRemember that good design is iterative. Test your interfaces with real users, gather feedback, and continuously refine your approach. The best interfaces feel invisible—they allow users to accomplish their goals without thinking about the interface itself.\n",
    "readTime": "3 min read",
    "filename": "ui-ux-design-principles-2025.mdx",
    "id": "ui-ux-design-principles-2025",
    "views": 0,
    "likes": 0
  },
  {
    "slug": "modern-web-development-trends-2025",
    "title": "Modern Web Development Trends That Will Dominate 2025",
    "subtitle": "Exploring the cutting-edge technologies and practices shaping the future of web development",
    "category": "Development",
    "tags": [
      "Development",
      "Technology",
      "Trends"
    ],
    "date": "February 3, 2025",
    "image": "/assets/images/landing/OniGirl3.jpg",
    "excerpt": "Exploring the cutting-edge technologies and practices shaping the future of web development. From AI integration to performance optimization strategies.",
    "author": "Gylan Salih",
    "authorImage": "/assets/images/blog/author.webp",
    "content": "\n## Introduction\n\nThe web development landscape is evolving at an unprecedented pace, with new technologies emerging every day. As we move through 2025, developers are embracing innovative approaches that not only enhance performance but also create more engaging user experiences. This blog post explores the key trends that are reshaping how we build and deploy web applications.\n\n![Modern web development workspace](/assets/images/blog/blogcontent1.jpg)\n\n## AI Integration in Web Development\n\nArtificial Intelligence is no longer just a buzzword in web development. From intelligent chatbots to automated testing and code generation, AI is becoming an integral part of the development workflow. Modern frameworks are incorporating AI-powered features that help developers write cleaner code, detect bugs early, and optimize performance automatically.\n\nOne of the most exciting developments is the integration of AI in design systems, where algorithms can suggest optimal layouts, color schemes, and typography based on user behavior analysis. This not only speeds up the design process but also creates more personalized user experiences.\n\n## Performance Optimization Strategies\n\nIn today's fast-paced digital world, users expect websites to load in under 3 seconds. Modern web development focuses heavily on performance optimization through techniques like lazy loading, code splitting, and advanced caching strategies. The introduction of Web Vitals as a ranking factor has made performance optimization a top priority for developers.\n\n![Performance optimization dashboard](/assets/images/blog/blogcontent2.jpg)\n\nFrameworks like Next.js and Nuxt.js are leading the charge with built-in performance optimizations, including automatic image optimization, route prefetching, and intelligent bundling. These tools make it easier than ever to create lightning-fast web applications without sacrificing functionality.\n\n## Modern Frameworks and Tools\n\nThe JavaScript ecosystem continues to evolve with new frameworks and tools that simplify complex development tasks. React 18's concurrent features, Vue 3's Composition API, and Svelte's compile-time optimizations are just a few examples of how modern frameworks are improving developer experience and application performance.\n\nBuild tools like Vite and esbuild are revolutionizing the development workflow with near-instant hot module replacement and lightning-fast build times. These improvements significantly reduce development time and improve the overall developer experience.\n\n## Enhanced User Experience\n\nModern web development places a strong emphasis on creating exceptional user experiences. This includes implementing smooth animations, intuitive navigation, and responsive design principles. The rise of micro-interactions and subtle animations helps guide users through interfaces while maintaining visual appeal.\n\nAccessibility is also becoming a core focus, with developers implementing ARIA labels, keyboard navigation, and screen reader compatibility. This ensures that web applications are usable by everyone, regardless of their abilities or the devices they use.\n\n## Conclusion\n\nAs we continue through 2025, web development is becoming more sophisticated, efficient, and user-centric. The integration of AI, focus on performance, and emphasis on user experience are creating a new standard for web applications. Developers who embrace these trends and continuously update their skills will be well-positioned to create the next generation of exceptional web experiences.\n\nThe future of web development is bright, and those who stay ahead of these trends will lead the industry forward. Whether you're a seasoned developer or just starting your journey, now is the perfect time to explore these exciting new technologies and practices.\n",
    "readTime": "3 min read",
    "filename": "modern-web-development-trends-2025.mdx",
    "id": "modern-web-development-trends-2025",
    "views": 0,
    "likes": 0
  }
]